Question 1
I am going to assume id's are assigned starting from 0
0
1
0

Question 2
0
0
0
# Individual Integers are immutable, meaning there is only ever one 42 object that
is referenced by variables.

Question 3
"String_arg_one looks like this now: pumpkins"
"String_arg_two looks like this now: pumpkinsrutabaga"
+= does not mutate the original object, it reassigns the local variable
<< mutates the original variable instead of reassigning it.

Question 4
"My string looks like this now: pumpkinsrutabaga"
"My array looks like this now: [pumpkins]"
again, << mutates the original object.
an_arary_param = ['pumkins', 'rutabaga'] reassigns an_array_param so it no longer
points to the original arguement my_array

Question 5
def not_so_tricky_method(a_string_param, an_array_param)
	a_string_param += 'rutabaga'
	an_array_param += ['rutabaga']

	return a_string_param, an_array_param
end
my_string, my_array = not_so_tricky_method(my_string, my_array)

You can return multiple objects and assign multiple objects with the same array.
This doesn't mutate either arguement and lets us assign a new value to both.

Question 6
def color_valid(color)
	color == "blue" || color == "green"
end

# the if statements were unneccessary, the above returns true or false without the if 
statements.

